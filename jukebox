#!/bin/sh
set -e
username=polarhive
mode=mix
music_folder="Music" && cd ~/$music_folder/.tmp/dl

usage() {
    echo "Options:"
    echo "  -a <artist>: Artist name"
    echo "  -g <genre>: Genre name"
    echo "  -s <song name by artist>: Search a song"
    echo "  -h: Display this help message"
    exit 1
}

clean() {
    q=$(echo $q | tr ' ' '+')
}

net() {
    notify-send "network error"
    exit 1
}

# play modes
play_user() {
    response=$(curl -s "https://www.last.fm/player/station/user/${username}/${mode}") || net
    notify-send "queueing"
    loop
    notify-send "finished queueing"
}

play_artist() {
    response=$(curl -s "https://www.last.fm/player/station/music/${q}") || net
    notify-send "queueing"
    loop
    notify-send "finished queueing"
}

play_genre() {
    response=$(curl -s "https://www.last.fm/player/station/tag/${q}") || net
    notify-send "queueing"
    loop
    notify-send "finished queueing"
}

play_song() {
    id=$(yt-dlp --default-search "https://music.youtube.com/search?q=" "$q" --playlist-end 1 --get-id)
    yt-dlp --parse-metadata "title:%(title)s" --parse-metadata "artist:%(artist)s" --add-metadata -f 'ba' -x --ignore-config -q --progress --restrict-filenames "$id" || notify-send "ERROR" && break
    queue
}

# queue songs
loop() {
    length=$(jq -r '.playlist | length' <<< "$response")
    for ((i=0; i<length; i++))
    do
        id="$(jq -r ".playlist[$i].playlinks[0].id" <<< "$response")"
        a="$(jq -r ".playlist[$i].artists[0].name" <<< "$response")"
        t="$(jq -r ".playlist[$i].name" <<< "$response")"
        dl
    done
}

dl() {
    yt-dlp --postprocessor-args "ffmpeg:-metadata title=${t@Q} -metadata artist=${a@Q}" -f 'ba' -x --ignore-config -q --progress --restrict-filenames "$id" || notify-send "ERROR: $a — $t" && break
    queue
}

queue() {
    rm ~/$music_folder/.tmp/dl/*.part -f
    name=$(ls -u | head -1)
    mpc -q update && mpc -q add ".tmp/dl/${name}" && mpc -q play
    echo "queueing: $a — $t"
}

# flags
while getopts ":a:g:s:h" opt; do
    case $opt in
        a)
            q="$OPTARG"
            clean
            play_artist
            ;;
        g)
            q="$OPTARG"
            clean
            play_genre
            ;;
        s)
            q="$OPTARG"
            play_song
            ;;
        h)
            usage
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument."
            usage
            ;;
    esac
done
if [ $OPTIND -eq 1 ]; then
    play_user
fi

