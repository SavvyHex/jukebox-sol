#!/bin/bash
# License: GPLv3.0
# polarhive.net/jukebox
set -e

# flags
export priority=false
export ytm_backend=false

# config
username=polarhive
mode=mix
music_folder=".local/share/.Music" && cd ~/$music_folder/.tmp/dl && rm *.part -f
ytargs="--ignore-config -x -q --progress --format bestaudio"

# help
usage() {
    echo "jukebox -h"
    echo "  -a: <artist name>"
    echo "  -g: <genre name>"
    echo "  -s: <song name>"
    echo "  -u: <lastfm: username>"
    echo "  -m: <lastfm: mix | recommended | library>"
    echo "  -l: vosk: search songs with your voice"
    echo "  -y: use ytmusic tags for songs"
    echo "  -c: top charts in your region (setup your api_key)"
    exit 1
}

# sanitize input
clean() {
    q=$(echo $q | tr ' ' '+')
}

# quit if offline
net() {
    echo "ERROR: Can't query LastFM"
    exit 1
}

play_user() {
    response=$(curl -s "https://www.last.fm/player/station/user/${username}/${mode}") || net
    loop
}

play_artist() {
    response=$(curl -s "https://www.last.fm/player/station/music/${q}") || net
    loop
}

play_genre() {
    response=$(curl -s "https://www.last.fm/player/station/tag/${q}") || net
    loop
}

play_song() {
    export ytm_backend=true
    export priority=true
    dl
}

# parse playlist
loop() {
    echo "queueing"
    length=$(jq -r '.playlist | length' <<< "$response")
    for ((i=0; i<length; i++))
    do
        id="$(jq -r ".playlist[$i].playlinks[0].id" <<< "$response")"
        a="$(jq -r ".playlist[$i].artists[0].name" <<< "$response")"
        t="$(jq -r ".playlist[$i].name" <<< "$response")"
        q="$a - $t"
        dl
    done
    echo "finished queueing"
}

# download song
dl() {
    if [ "$ytm_backend" = true ]; then 
        if yt-dlp ${ytargs} --playlist-end 1 --default-search "https://music.youtube.com/search?q=" "$q" --parse-metadata "title:%(title)s" --parse-metadata "artist:%(artist)s" --add-metadata -o '%(artist)s - %(title)s.%(ext)s'; then 
            queue
        else
            echo "ERROR: https://youtu.be/${id}"
        fi
    else
        if yt-dlp ${ytargs} --postprocessor-args "ffmpeg:-metadata title=${t@Q} -metadata artist=${a@Q}" -o "$a - $t.%(ext)s" "$id"; then
            queue
        else
            echo "ERROR: https://youtu.be/${id}"
        fi
    fi
}

# queue song
queue() {
    mpc -q update; sleep 1
    if [ "$priority" = true ]; then
        name=$(ls -u | head -1); q=$name
        if [ "$(mpc playlist | wc -l)" -eq 0 ]; then
            mpc -q insert ".tmp/dl/${name}"
            mpc -q play
        else
            mpc -q insert ".tmp/dl/${name}"
            mpc -q play && mpc -q next
        fi
    else
        mpc -q add ".tmp/dl/$q.opus"
    fi
    echo "queueing: $q"
}

# flags
while getopts ":a:g:s:u:m:clhy" opt; do
    case $opt in
        a)
            q="$OPTARG" && clean
            play_artist
            ;;
        g)
            q="$OPTARG" && clean
            play_genre
            ;;
        s)
            export q="$OPTARG"
            play_song
            ;;
        y)
            export ytm_backend=true
            play_user
            ;;
        u)
            export username="$OPTARG"
            play_user
            ;;
        m)
            export mode="$OPTARG"
            play_user
            ;;
        h)
            usage
            ;;
        l)
            ~/.local/repos/jukebox/listen
            ;;
        c)
            ~/.local/repos/jukebox/charts
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument."
            ;;
    esac
done
if [ $OPTIND -eq 1 ]; then
    play_user
fi

# ctrl+c trap
trap exit 1 SIGINT
